import client from "@sendgrid/client";
import Response from "@sendgrid/helpers/classes/response";

import { generateTypeDefinitionFile } from "./genType";

type TemplateVersionContent = {
  id: string;
  user_id: number;
  template_id: string;
  active: 0 | 1;
  name: string;
  html_content: string;
  plain_content: string;
  generate_plain_content: boolean;
  subject: string;
  updated_at: string;
  editor: string;
  thumbnail_urlL: string;
};

type SingleTemplateResponse = {
  id: string;
  name: string;
  generation: string;
  updated_at: string;
  versions: TemplateVersionContent[];
};

const getSingle = async (
  templateId: string
): Promise<Response<SingleTemplateResponse>> => {
  const [res] = await client.request({
    url: `/v3/templates/${templateId}`,
    method: "GET",
    qs: {
      generations: "legacy,dynamic",
      page_size: 18,
    },
  });
  // FIXME: handle errors
  return res as Response<SingleTemplateResponse>;
};

const regex = /(?<!\{)\{\{([^{}]+)\}\}(?!\})/g;

const extractVariablesIntemplate = (plainContent: string) => {
  const matches = plainContent.match(regex);
  if (!matches) {
    return [];
  }
  return matches.map((match) => match.slice(2, -2));
};

export const genOne = async ({
  templateId,
  interfaceName,
}: {
  templateId: string;
  interfaceName?: string;
}): Promise<string> => {
  const res = await getSingle(templateId);
  // FIXME: actually res is falsy
  const activeTemplateContent = res.body.versions.filter((t) => t.active)[0];
  const variables = extractVariablesIntemplate(
    activeTemplateContent.plain_content
  );
  return generateTypeDefinitionFile({
    variables,
    // FIXME: use "activeTemplateContent.name"?
    interfaceName: interfaceName ?? "AutoGenerated",
  });
};